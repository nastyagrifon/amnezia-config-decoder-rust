name: Release

on:
  push:
    tags:
      - 'v*.*.*' 

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    name: Build - ${{ matrix.platform.name }}
    needs: create-release
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: amnezia-config-decoder-rust
            archive: tar.gz
          
          - name: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: amnezia-config-decoder-rust
            archive: tar.gz
          
          - name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: amnezia-config-decoder-rust.exe
            archive: zip
          
          - name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: amnezia-config-decoder-rust
            archive: tar.gz
          
          - name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: amnezia-config-decoder-rust
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Create archive (Unix)
        if: matrix.platform.archive == 'tar.gz'
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czf ../../../${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.tar.gz ${{ matrix.platform.bin }}
          cd -

      - name: Create archive (Windows)
        if: matrix.platform.archive == 'zip'
        shell: pwsh
        run: |
          cd target/${{ matrix.platform.target }}/release
          Compress-Archive -Path ${{ matrix.platform.bin }} -DestinationPath ../../../${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.zip
          cd -

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.${{ matrix.platform.archive }}
          asset_name: ${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.${{ matrix.platform.archive }}
          asset_content_type: application/octet-stream

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          if [ "${{ matrix.platform.archive }}" = "tar.gz" ]; then
            sha256sum ${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.tar.gz > ${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.tar.gz.sha256
          else
            sha256sum ${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.zip > ${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.zip.sha256
          fi

      - name: Upload SHA256 checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.${{ matrix.platform.archive }}.sha256
          asset_name: ${{ matrix.platform.name }}-${{ needs.create-release.outputs.version }}.${{ matrix.platform.archive }}.sha256
          asset_content_type: text/plain
