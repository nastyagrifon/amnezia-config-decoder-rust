use base64::{engine::general_purpose::URL_SAFE_NO_PAD, Engine};
use flate2::write::ZlibEncoder;
use flate2::read::ZlibDecoder;
use flate2::Compression;
use serde_json::{Value, to_string_pretty, from_str};
use std::io::{Write, Read};

const PREFIX: &str = "vpn://";

/// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ VPN URL
pub fn encode(config: &Value) -> Result<String, Box<dyn std::error::Error>> {
    // 1. –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    let json_string = to_string_pretty(config)?;
    let original_data = json_string.as_bytes();
    let original_data_len = original_data.len() as u32;
    
    // 2. –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let compressed_data = compress_data(original_data)?;
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (4 –±–∞–π—Ç–∞, Big Endian)
    let header = create_header(original_data_len);
    
    // 4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let mut combined = header.to_vec();
    combined.extend_from_slice(&compressed_data);
    
    // 5. Base64 URL-safe –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ padding)
    let encoded = encode_base64(&combined);
    
    // 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    Ok(format!("{}{}", PREFIX, encoded))
}

/// –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç VPN URL –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
pub fn decode(vpn_url: &str) -> Result<Value, Box<dyn std::error::Error>> {
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    let encoded_data = vpn_url.strip_prefix(PREFIX)
        .ok_or("Invalid VPN URL: missing prefix")?;
    
    // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Base64
    let decoded = decode_base64(encoded_data)?;
    
    // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–∂–∞—Ç–∏–µ–º
    match try_decode_compressed(&decoded) {
        Ok(json) => Ok(json),
        Err(_) => {
            // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ —á–∏—Å—Ç—ã–π Base64 JSON
            try_decode_plain(&decoded)
        }
    }
}

// === Helper —Ñ—É–Ω–∫—Ü–∏–∏ ===

/// –°–∂–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è zlib
fn compress_data(data: &[u8]) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    let mut encoder = ZlibEncoder::new(Vec::new(), Compression::default());
    encoder.write_all(data)?;
    Ok(encoder.finish()?)
}

/// –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è zlib
fn decompress_data(data: &[u8]) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    let mut decoder = ZlibDecoder::new(data);
    let mut decompressed = Vec::new();
    decoder.read_to_end(&mut decompressed)?;
    Ok(decompressed)
}

/// –°–æ–∑–¥–∞–µ—Ç 4-–±–∞–π—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–ª–∏–Ω–æ–π –¥–∞–Ω–Ω—ã—Ö (Big Endian)
fn create_header(length: u32) -> [u8; 4] {
    length.to_be_bytes()
}

/// –°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω—É –∏–∑ 4-–±–∞–π—Ç–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (Big Endian)
fn read_header(header: &[u8]) -> u32 {
    u32::from_be_bytes([header[0], header[1], header[2], header[3]])
}

/// –ö–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Base64 URL-safe –±–µ–∑ padding
fn encode_base64(data: &[u8]) -> String {
    URL_SAFE_NO_PAD.encode(data)
}

/// –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Base64 URL-safe (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ padding)
fn decode_base64(data: &str) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    Ok(URL_SAFE_NO_PAD.decode(data)?)
}

/// –ü—ã—Ç–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–∂–∞—Ç–∏–µ–º
fn try_decode_compressed(data: &[u8]) -> Result<Value, Box<dyn std::error::Error>> {
    if data.len() < 4 {
        return Err("Data too short for header".into());
    }
    
    // –°—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–ª–∏–Ω—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    let expected_len = read_header(&data[..4]) as usize;
    
    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
    let decompressed = decompress_data(&data[4..])?;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    if decompressed.len() != expected_len {
        return Err(format!(
            "Data integrity check failed: expected {} bytes, got {}",
            expected_len,
            decompressed.len()
        ).into());
    }
    
    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
    let json_string = String::from_utf8(decompressed)?;
    Ok(from_str(&json_string)?)
}

/// –ü—ã—Ç–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —á–∏—Å—Ç—ã–π Base64 JSON (–±–µ–∑ —Å–∂–∞—Ç–∏—è)
fn try_decode_plain(data: &[u8]) -> Result<Value, Box<dyn std::error::Error>> {
    let json_string = String::from_utf8(data.to_vec())?;
    Ok(from_str(&json_string)?)
}

/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fn detect_input_type(input: &str) -> InputType {
    let trimmed = input.trim();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VPN URL
    if trimmed.starts_with(PREFIX) {
        return InputType::VpnUrl;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JSON
    if (trimmed.starts_with('{') && trimmed.ends_with('}')) 
        || (trimmed.starts_with('[') && trimmed.ends_with(']')) {
        return InputType::Json;
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
    if from_str::<Value>(trimmed).is_ok() {
        return InputType::Json;
    }
    
    InputType::Unknown
}

#[derive(Debug, PartialEq)]
enum InputType {
    VpnUrl,
    Json,
    Unknown,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = std::env::args().collect();

    let mut explicit_mode: Option<String> = None;
    let mut input_file: Option<String> = None;
    let mut output_file: Option<String> = None;
    let mut direct_input: Vec<String> = Vec::new();
    
    let mut i = 1;
    while i < args.len() {
        match args[i].as_str() {
            "-e" | "--encode" => explicit_mode = Some("encode".to_string()),
            "-d" | "--decode" => explicit_mode = Some("decode".to_string()),
            "-i" | "--input" => {
                if i + 1 < args.len() {
                    input_file = Some(args[i + 1].clone());
                    i += 1;
                } else {
                    eprintln!("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è -i");
                    std::process::exit(1);
                }
            }
            "-o" | "--output" => {
                if i + 1 < args.len() {
                    output_file = Some(args[i + 1].clone());
                    i += 1;
                } else {
                    eprintln!("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è -o");
                    std::process::exit(1);
                }
            }
            "-h" | "--help" => {
                print_usage(&args[0]);
                std::process::exit(0);
            }
            _ => direct_input.push(args[i].clone()),
        }
        i += 1;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let input = get_input(input_file, direct_input)?;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    let mode = if let Some(explicit) = explicit_mode {
        explicit
    } else {
        // –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç
        match detect_input_type(&input) {
            InputType::VpnUrl => {
                eprintln!("üîç –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç: –æ–±–Ω–∞—Ä—É–∂–µ–Ω VPN URL, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ");
                "decode".to_string()
            }
            InputType::Json => {
                eprintln!("üîç –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç: –æ–±–Ω–∞—Ä—É–∂–µ–Ω JSON, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ");
                "encode".to_string()
            }
            InputType::Unknown => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
                eprintln!("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -e –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ -d –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è");
                std::process::exit(1);
            }
        }
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    match mode.as_str() {
        "encode" => {
            let config: Value = from_str(&input)?;
            let encoded = encode(&config)?;
            write_output(output_file, &encoded)?;
        }
        "decode" => {
            let vpn_url = input.trim().to_string();
            let decoded = decode(&vpn_url)?;
            let output = to_string_pretty(&decoded)?;
            write_output(output_file, &output)?;
        }
        _ => unreachable!(),
    }

    Ok(())
}

fn get_input(file: Option<String>, direct: Vec<String>) -> Result<String, Box<dyn std::error::Error>> {
    if let Some(filename) = file {
        read_file(&filename)
    } else if !direct.is_empty() {
        Ok(direct.join(" "))
    } else {
        read_stdin()
    }
}

fn write_output(file: Option<String>, content: &str) -> Result<(), Box<dyn std::error::Error>> {
    if let Some(filename) = file {
        write_file(&filename, content)
    } else {
        println!("{}", content);
        Ok(())
    }
}

fn read_file(filename: &str) -> Result<String, Box<dyn std::error::Error>> {
    use std::fs;
    Ok(fs::read_to_string(filename)?)
}

fn write_file(filename: &str, content: &str) -> Result<(), Box<dyn std::error::Error>> {
    use std::fs;
    fs::write(filename, content)?;
    Ok(())
}

fn print_usage(program: &str) {
    eprintln!("VPN Config Encoder/Decoder");
    eprintln!();
    eprintln!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
    eprintln!("  {} [-e|-d] [-i <input>] [-o <output>] [<data>]", program);
    eprintln!();
    eprintln!("–û–ø—Ü–∏–∏:");
    eprintln!("  -e, --encode       –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è");
    eprintln!("  -d, --decode       –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è");
    eprintln!("  -i, --input FILE   –ß–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞");
    eprintln!("  -o, --output FILE  –ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª");
    eprintln!("  -h, --help         –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
    eprintln!();
    eprintln!("–ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç:");
    eprintln!("  –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã -e/-d, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç");
    eprintln!("  —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (JSON –∏–ª–∏ VPN URL) –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.");
    eprintln!();
    eprintln!("–ü—Ä–∏–º–µ—Ä—ã:");
    eprintln!("  # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Å —Ñ–∞–π–ª–∞–º–∏");
    eprintln!("  {} -i config.json -o vpn_url.txt", program);
    eprintln!("  {} -i vpn_url.txt -o config.json", program);
    eprintln!();
    eprintln!("  # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Å –ø—Ä—è–º—ã–º –≤–≤–æ–¥–æ–º");
    eprintln!("  {} '{{\"server\":\"example.com\"}}'", program);
    eprintln!("  {} 'vpn://AAAAHXic...'", program);
    eprintln!();
    eprintln!("  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞");
    eprintln!("  {} -e -i config.json", program);
    eprintln!("  {} -d -i vpn_url.txt", program);
    eprintln!();
    eprintln!("  # –†–∞–±–æ—Ç–∞ —Å stdin/stdout");
    eprintln!("  cat config.json | {}", program);
    eprintln!("  echo 'vpn://...' | {} -o decoded.json", program);
}

fn read_stdin() -> Result<String, Box<dyn std::error::Error>> {
    use std::io::{self, Read};
    let mut buffer = String::new();
    io::stdin().read_to_string(&mut buffer)?;
    Ok(buffer)
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::json;

    #[test]
    fn test_encode_decode() {
        let config = json!({
            "server": "example.com",
            "port": 8080,
            "protocol": "wireguard",
            "key": "test_key_12345"
        });

        let encoded = encode(&config).unwrap();
        assert!(encoded.starts_with(PREFIX));

        let decoded = decode(&encoded).unwrap();
        assert_eq!(config, decoded);
    }

    #[test]
    fn test_detect_input_type() {
        // JSON –¥–µ—Ç–µ–∫—Ç
        assert_eq!(detect_input_type(r#"{"key": "value"}"#), InputType::Json);
        assert_eq!(detect_input_type(r#"{"server":"test.com"}"#), InputType::Json);
        assert_eq!(detect_input_type(r#"[1, 2, 3]"#), InputType::Json);
        
        // VPN URL –¥–µ—Ç–µ–∫—Ç
        assert_eq!(detect_input_type("vpn://AAAAHXic"), InputType::VpnUrl);
        assert_eq!(detect_input_type("vpn://test123"), InputType::VpnUrl);
        
        // Unknown
        assert_eq!(detect_input_type("random text"), InputType::Unknown);
        assert_eq!(detect_input_type(""), InputType::Unknown);
    }

    #[test]
    fn test_helper_functions() {
        let data = b"Hello, World!";
        
        // –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è/—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        let compressed = compress_data(data).unwrap();
        let decompressed = decompress_data(&compressed).unwrap();
        assert_eq!(data, decompressed.as_slice());
        
        // –¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let len = 12345u32;
        let header = create_header(len);
        let read_len = read_header(&header);
        assert_eq!(len, read_len);
        
        // –¢–µ—Å—Ç Base64
        let encoded = encode_base64(data);
        let decoded = decode_base64(&encoded).unwrap();
        assert_eq!(data, decoded.as_slice());
    }
}